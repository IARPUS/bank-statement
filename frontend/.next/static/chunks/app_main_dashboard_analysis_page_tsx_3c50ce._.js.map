{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/roychoi/Desktop/projects/bank-analysis/frontend/app/main/dashboard/analysis/page.tsx"],"sourcesContent":["'use client';\n\nimport React, { useEffect, useState } from 'react';\nimport {\n  Box,\n  Typography,\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n} from '@mui/material';\nimport {\n  LineChart,\n  Line,\n  CartesianGrid,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n} from 'recharts';\nimport { useSearchParams } from 'next/navigation';\nimport { processBankStatementTesseract } from '@/app/utils/files';\n\ninterface Transaction {\n  date: string;\n  description: string;\n  debit?: string;\n  credit?: string;\n  balance?: string;\n}\n\ninterface OrganizedResponse {\n  accountInfo: Record<string, string>;\n  transactions: Transaction[];\n}\n\nconst AnalysisPage: React.FC = () => {\n  const searchParams = useSearchParams();\n  const bucketName = searchParams.get('bucketName');\n  const filePath = searchParams.get('filePath');\n\n  const [data, setData] = useState<OrganizedResponse | null>(null);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      if (!bucketName || !filePath) {\n        setError('Bucket name and file path are required.');\n        setLoading(false);\n        return;\n      }\n\n      try {\n        const result = await processBankStatementTesseract(bucketName, filePath);\n        setData(result);\n        console.log(result)\n      } catch (err: any) {\n        console.error('Error fetching data:', err);\n        setError('Failed to fetch and process bank statement.');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, [bucketName, filePath]);\n\n  if (loading) {\n    return <Typography variant=\"h6\">Loading data...</Typography>;\n  }\n\n  if (error) {\n    return (\n      <Box>\n        <Typography variant=\"h6\" color=\"error\">\n          Error: {error}\n        </Typography>\n      </Box>\n    );\n  }\n\n  if (!data) {\n    return (\n      <Typography variant=\"h6\">\n        No data available.\n      </Typography>\n    );\n  }\n\n  const transactionsForGraph = data.transactions.map((transaction) => ({\n    date: transaction.date,\n    debit: transaction.debit ? parseFloat(transaction.debit) : 0,\n    credit: transaction.credit ? parseFloat(transaction.credit) : 0,\n    balance: transaction.balance ? parseFloat(transaction.balance) : 0,\n  }));\n\n  return (\n    <Box sx={{ p: 3 }}>\n      {/* Summary Section */}\n      <Box sx={{ mb: 4 }}>\n        <Typography variant=\"h4\" gutterBottom>\n          Account Summary\n        </Typography>\n        <Paper sx={{ p: 3 }}>\n          {Object.entries(data.accountInfo).map(([key, value]) => (\n            <Typography key={key} variant=\"body1\">\n              <strong>{key}:</strong> {value}\n            </Typography>\n          ))}\n        </Paper>\n      </Box>\n\n      {/* Graph Section */}\n      <Box sx={{ mb: 4 }}>\n        <Typography variant=\"h5\" gutterBottom>\n          Transaction Analysis\n        </Typography>\n        <ResponsiveContainer width=\"100%\" height={400}>\n          <LineChart data={transactionsForGraph} margin={{ top: 20, right: 30, left: 20, bottom: 5 }}>\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey=\"date\" />\n            <YAxis />\n            <Tooltip />\n            <Legend />\n            <Line type=\"monotone\" dataKey=\"debit\" stroke=\"#ff7300\" name=\"Debit\" />\n            <Line type=\"monotone\" dataKey=\"credit\" stroke=\"#387908\" name=\"Credit\" />\n            <Line type=\"monotone\" dataKey=\"balance\" stroke=\"#003f5c\" name=\"Balance\" />\n          </LineChart>\n        </ResponsiveContainer>\n      </Box>\n\n      {/* Transactions Table */}\n      <Box>\n        <Typography variant=\"h5\" gutterBottom>\n          Transactions\n        </Typography>\n        <TableContainer component={Paper}>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell>Date</TableCell>\n                <TableCell>Description</TableCell>\n                <TableCell>Debit</TableCell>\n                <TableCell>Credit</TableCell>\n                <TableCell>Balance</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {data.transactions.map((transaction, index) => (\n                <TableRow key={index}>\n                  <TableCell>{transaction.date}</TableCell>\n                  <TableCell>{transaction.description}</TableCell>\n                  <TableCell>{transaction.debit || '-'}</TableCell>\n                  <TableCell>{transaction.credit || '-'}</TableCell>\n                  <TableCell>{transaction.balance || '-'}</TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </Box>\n    </Box>\n  );\n};\n\nexport default AnalysisPage;\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 426, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}