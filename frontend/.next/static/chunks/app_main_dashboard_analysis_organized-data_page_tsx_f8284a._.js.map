{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/roychoi/Desktop/projects/bank-analysis/frontend/app/main/dashboard/analysis/organized-data/page.tsx"],"sourcesContent":["'use client';\n\nimport React, { useEffect, useState } from 'react';\nimport {\n  Box,\n  Typography,\n  Paper,\n  Grid,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n} from '@mui/material';\nimport { useTheme } from '@mui/material/styles';\nimport { produceSummaryOpenAI } from '@/app/utils/files';\nimport { useBankStatement } from '../../layout';\n\ninterface Transaction {\n  date: string;\n  description: string;\n  amount: string; // Updated to handle both numeric and empty string\n  paymentMethod: string;\n}\n\ninterface CategoryData {\n  transactions: Transaction[];\n  total: string; // Updated to handle string values\n}\n\ninterface SummaryData {\n  totalSpending: string;\n  highestCategory: string;\n  lowestCategory: string;\n}\n\ninterface FinancialData {\n  categories: Record<string, CategoryData>;\n  summary: SummaryData;\n}\n\nconst FinancialPage: React.FC = () => {\n  const { bankStatementText } = useBankStatement();\n  const [financialData, setFinancialData] = useState<FinancialData | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const theme = useTheme();\n\n  useEffect(() => {\n    if (!bankStatementText) {\n      setError('No bank statement text available.');\n      setLoading(false);\n      return;\n    }\n\n    const processBankStatement = async () => {\n      try {\n        const response = await produceSummaryOpenAI(bankStatementText);\n        console.log('API Response:', response);\n\n        const processedData: FinancialData = response;\n        setFinancialData(processedData);\n      } catch (err: any) {\n        console.error('Error processing bank statement:', err);\n        setError('Failed to process bank statement.');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    processBankStatement();\n  }, [bankStatementText]);\n\n  if (loading) return <Typography variant=\"h6\">Loading financial data...</Typography>;\n  if (error)\n    return (\n      <Typography variant=\"h6\" color=\"error\">\n        {error}\n      </Typography>\n    );\n\n  if (!financialData) return null;\n\n  const { categories, summary } = financialData;\n\n  return (\n    <Box sx={{ p: 3 }}>\n      {/* Summary Section */}\n      <Paper sx={{ mb: 4, p: 3 }}>\n        <Typography variant=\"h4\" gutterBottom>\n          Financial Summary\n        </Typography>\n        <Typography variant=\"body1\">\n          <strong>Total Spending:</strong> ${summary.totalSpending || '0.00'}\n        </Typography>\n        <Typography variant=\"body1\">\n          <strong>Highest Spending Category:</strong> {summary.highestCategory || 'N/A'}\n        </Typography>\n        <Typography variant=\"body1\">\n          <strong>Lowest Spending Category:</strong> {summary.lowestCategory || 'N/A'}\n        </Typography>\n      </Paper>\n\n      {/* Categories Section */}\n      <Typography variant=\"h5\" gutterBottom>\n        Spending Categories\n      </Typography>\n      <Grid container spacing={3}>\n        {Object.entries(categories).map(([categoryName, categoryData]) => (\n          <Grid item xs={12} md={6} key={categoryName}>\n            <Paper sx={{ p: 3 }}>\n              <Typography variant=\"h6\" gutterBottom>\n                {categoryName}\n              </Typography>\n              <Typography variant=\"body2\" gutterBottom>\n                <strong>Total:</strong> ${categoryData.total || '0.00'}\n              </Typography>\n              <TableContainer component={Paper} variant=\"outlined\">\n                <Table size=\"small\">\n                  <TableHead>\n                    <TableRow>\n                      <TableCell>Date</TableCell>\n                      <TableCell>Description</TableCell>\n                      <TableCell>Amount</TableCell>\n                      <TableCell>Payment Method</TableCell>\n                    </TableRow>\n                  </TableHead>\n                  <TableBody>\n                    {categoryData.transactions.map((transaction, index) => (\n                      <TableRow key={index}>\n                        <TableCell>{transaction.date || 'N/A'}</TableCell>\n                        <TableCell>{transaction.description || 'N/A'}</TableCell>\n                        <TableCell>\n                          {transaction.amount ? `$${transaction.amount}` : 'N/A'}\n                        </TableCell>\n                        <TableCell>{transaction.paymentMethod || 'N/A'}</TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </TableContainer>\n            </Paper>\n          </Grid>\n        ))}\n      </Grid>\n    </Box>\n  );\n};\n\nexport default FinancialPage;\n"],"names":[],"mappings":";;;;AAEA;AAcA;AACA;AAFA;AAZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAHA;;;;;;AA0CA,MAAM,gBAA0B;;IAC9B,MAAM,EAAE,iBAAiB,EAAE,GAAG,CAAA,GAAA,sIAAA,CAAA,mBAAgB,AAAD;IAC7C,MAAM,CAAC,eAAe,iBAAiB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAwB;IACzE,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IACvC,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAiB;IAClD,MAAM,QAAQ,CAAA,GAAA,iMAAA,CAAA,WAAQ,AAAD;IAErB,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;mCAAE;YACR,IAAI,CAAC,mBAAmB;gBACtB,SAAS;gBACT,WAAW;gBACX;YACF;YAEA,MAAM;gEAAuB;oBAC3B,IAAI;wBACF,MAAM,WAAW,MAAM,CAAA,GAAA,yHAAA,CAAA,uBAAoB,AAAD,EAAE;wBAC5C,QAAQ,GAAG,CAAC,iBAAiB;wBAE7B,MAAM,gBAA+B;wBACrC,iBAAiB;oBACnB,EAAE,OAAO,KAAU;wBACjB,QAAQ,KAAK,CAAC,oCAAoC;wBAClD,SAAS;oBACX,SAAU;wBACR,WAAW;oBACb;gBACF;;YAEA;QACF;kCAAG;QAAC;KAAkB;IAEtB,IAAI,SAAS,qBAAO,6LAAC,yMAAA,CAAA,aAAU;QAAC,SAAQ;kBAAK;;;;;;IAC7C,IAAI,OACF,qBACE,6LAAC,yMAAA,CAAA,aAAU;QAAC,SAAQ;QAAK,OAAM;kBAC5B;;;;;;IAIP,IAAI,CAAC,eAAe,OAAO;IAE3B,MAAM,EAAE,UAAU,EAAE,OAAO,EAAE,GAAG;IAEhC,qBACE,6LAAC,oLAAA,CAAA,MAAG;QAAC,IAAI;YAAE,GAAG;QAAE;;0BAEd,6LAAC,0LAAA,CAAA,QAAK;gBAAC,IAAI;oBAAE,IAAI;oBAAG,GAAG;gBAAE;;kCACvB,6LAAC,yMAAA,CAAA,aAAU;wBAAC,SAAQ;wBAAK,YAAY;kCAAC;;;;;;kCAGtC,6LAAC,yMAAA,CAAA,aAAU;wBAAC,SAAQ;;0CAClB,6LAAC;0CAAO;;;;;;4BAAwB;4BAAG,QAAQ,aAAa,IAAI;;;;;;;kCAE9D,6LAAC,yMAAA,CAAA,aAAU;wBAAC,SAAQ;;0CAClB,6LAAC;0CAAO;;;;;;4BAAmC;4BAAE,QAAQ,eAAe,IAAI;;;;;;;kCAE1E,6LAAC,yMAAA,CAAA,aAAU;wBAAC,SAAQ;;0CAClB,6LAAC;0CAAO;;;;;;4BAAkC;4BAAE,QAAQ,cAAc,IAAI;;;;;;;;;;;;;0BAK1E,6LAAC,yMAAA,CAAA,aAAU;gBAAC,SAAQ;gBAAK,YAAY;0BAAC;;;;;;0BAGtC,6LAAC,uLAAA,CAAA,OAAI;gBAAC,SAAS;gBAAC,SAAS;0BACtB,OAAO,OAAO,CAAC,YAAY,GAAG,CAAC,CAAC,CAAC,cAAc,aAAa,iBAC3D,6LAAC,uLAAA,CAAA,OAAI;wBAAC,IAAI;wBAAC,IAAI;wBAAI,IAAI;kCACrB,cAAA,6LAAC,0LAAA,CAAA,QAAK;4BAAC,IAAI;gCAAE,GAAG;4BAAE;;8CAChB,6LAAC,yMAAA,CAAA,aAAU;oCAAC,SAAQ;oCAAK,YAAY;8CAClC;;;;;;8CAEH,6LAAC,yMAAA,CAAA,aAAU;oCAAC,SAAQ;oCAAQ,YAAY;;sDACtC,6LAAC;sDAAO;;;;;;wCAAe;wCAAG,aAAa,KAAK,IAAI;;;;;;;8CAElD,6LAAC,qNAAA,CAAA,iBAAc;oCAAC,WAAW,0LAAA,CAAA,QAAK;oCAAE,SAAQ;8CACxC,cAAA,6LAAC,0LAAA,CAAA,QAAK;wCAAC,MAAK;;0DACV,6LAAC,sMAAA,CAAA,YAAS;0DACR,cAAA,6LAAC,mMAAA,CAAA,WAAQ;;sEACP,6LAAC,sMAAA,CAAA,YAAS;sEAAC;;;;;;sEACX,6LAAC,sMAAA,CAAA,YAAS;sEAAC;;;;;;sEACX,6LAAC,sMAAA,CAAA,YAAS;sEAAC;;;;;;sEACX,6LAAC,sMAAA,CAAA,YAAS;sEAAC;;;;;;;;;;;;;;;;;0DAGf,6LAAC,sMAAA,CAAA,YAAS;0DACP,aAAa,YAAY,CAAC,GAAG,CAAC,CAAC,aAAa,sBAC3C,6LAAC,mMAAA,CAAA,WAAQ;;0EACP,6LAAC,sMAAA,CAAA,YAAS;0EAAE,YAAY,IAAI,IAAI;;;;;;0EAChC,6LAAC,sMAAA,CAAA,YAAS;0EAAE,YAAY,WAAW,IAAI;;;;;;0EACvC,6LAAC,sMAAA,CAAA,YAAS;0EACP,YAAY,MAAM,GAAG,CAAC,CAAC,EAAE,YAAY,MAAM,EAAE,GAAG;;;;;;0EAEnD,6LAAC,sMAAA,CAAA,YAAS;0EAAE,YAAY,aAAa,IAAI;;;;;;;uDAN5B;;;;;;;;;;;;;;;;;;;;;;;;;;;uBApBI;;;;;;;;;;;;;;;;AAsCzC;GA1GM;;QAC0B,sIAAA,CAAA,mBAAgB;QAIhC,iMAAA,CAAA,WAAQ;;;KALlB;uCA4GS"}},
    {"offset": {"line": 352, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}