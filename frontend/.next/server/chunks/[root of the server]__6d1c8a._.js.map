{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 191, "column": 0}, "map": {"version":3,"sources":["file:///Users/roychoi/Desktop/projects/bank-analysis/frontend/app/api/files/retrieve-metadata/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\nimport AWS from \"aws-sdk\";\n\n// If you're using Next.js App Router, name your file `route.ts` in `app/api/proxy-s3/`\n\n// Disable Next.js built-in body parser for demonstration (like your Textract example)\nexport const config = {\n  api: {\n    bodyParser: false,\n  },\n};\n\n// Initialize AWS S3 client (v2). \n// Alternatively, you could use @aws-sdk/client-s3 (v3).\nconst s3 = new AWS.S3({\n  region: process.env.AWS_REGION || \"us-east-1\",\n  // credentials automatically picked up from environment variables:\n  // AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, etc.\n});\n\n/**\n * POST /api/proxy-s3\n * \n * Expects JSON body:\n * {\n *   \"bucketName\": \"...\",\n *   \"filePath\": \"...\",\n *   \"mode\": \"object\" | \"metadata\"\n * }\n * \n * Example usage (client-side):\n * \n *   await fetch(\"/api/proxy-s3\", {\n *     method: \"POST\",\n *     headers: { \"Content-Type\": \"application/json\" },\n *     body: JSON.stringify({\n *       bucketName: \"my-bucket\",\n *       filePath: \"some/key.pdf\",\n *       mode: \"metadata\"\n *     })\n *   });\n */\nexport async function POST(req: Request) {\n  try {\n    // Parse JSON body\n    const { bucketName, filePath, mode } = await req.json();\n\n    // Validate inputs\n    if (!bucketName || !filePath) {\n      return NextResponse.json(\n        { message: \"bucketName and filePath are required\" },\n        { status: 400 }\n      );\n    }\n\n    // Decide what we want to retrieve: full object or just metadata\n    if (mode === \"object\") {\n      // 1) Get the entire object from S3\n      const params = {\n        Bucket: bucketName,\n        Key: filePath,\n      };\n      const s3Object = await s3.getObject(params).promise();\n\n      // Convert file to a base64 string if it's binary\n      // (For large files, streaming is more efficient, but this is a simple demo.)\n      const base64Content = s3Object.Body\n        ? s3Object.Body.toString(\"base64\")\n        : null;\n\n      return NextResponse.json(\n        {\n          message: \"S3 object retrieved successfully\",\n          data: {\n            ContentType: s3Object.ContentType,\n            ContentLength: s3Object.ContentLength,\n            BodyBase64: base64Content,\n          },\n        },\n        { status: 200 }\n      );\n    } else {\n      // 2) Get just the metadata (headObject)\n      const params = {\n        Bucket: bucketName,\n        Key: filePath,\n      };\n      const metadata = await s3.headObject(params).promise();\n\n      return NextResponse.json(\n        {\n          message: \"S3 metadata retrieved successfully\",\n          data: {\n            ContentLength: metadata.ContentLength,\n            LastModified: metadata.LastModified,\n            ContentType: metadata.ContentType,\n            Metadata: metadata.Metadata, // custom user metadata\n          },\n        },\n        { status: 200 }\n      );\n    }\n  } catch (error: any) {\n    console.error(\"Error in proxy-s3 API route:\", error);\n    return NextResponse.json(\n      { message: \"Internal server error\", error: error.message },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAKO,MAAM,SAAS;IACpB,KAAK;QACH,YAAY;IACd;AACF;AAEA,kCAAkC;AAClC,wDAAwD;AACxD,MAAM,KAAK,IAAI,0IAAA,CAAA,UAAG,CAAC,EAAE,CAAC;IACpB,QAAQ,QAAQ,GAAG,CAAC,UAAU,IAAI;AAGpC;AAwBO,eAAe,KAAK,GAAY;IACrC,IAAI;QACF,kBAAkB;QAClB,MAAM,EAAE,UAAU,EAAE,QAAQ,EAAE,IAAI,EAAE,GAAG,MAAM,IAAI,IAAI;QAErD,kBAAkB;QAClB,IAAI,CAAC,cAAc,CAAC,UAAU;YAC5B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;YAAuC,GAClD;gBAAE,QAAQ;YAAI;QAElB;QAEA,gEAAgE;QAChE,IAAI,SAAS,UAAU;YACrB,mCAAmC;YACnC,MAAM,SAAS;gBACb,QAAQ;gBACR,KAAK;YACP;YACA,MAAM,WAAW,MAAM,GAAG,SAAS,CAAC,QAAQ,OAAO;YAEnD,iDAAiD;YACjD,6EAA6E;YAC7E,MAAM,gBAAgB,SAAS,IAAI,GAC/B,SAAS,IAAI,CAAC,QAAQ,CAAC,YACvB;YAEJ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBACE,SAAS;gBACT,MAAM;oBACJ,aAAa,SAAS,WAAW;oBACjC,eAAe,SAAS,aAAa;oBACrC,YAAY;gBACd;YACF,GACA;gBAAE,QAAQ;YAAI;QAElB,OAAO;YACL,wCAAwC;YACxC,MAAM,SAAS;gBACb,QAAQ;gBACR,KAAK;YACP;YACA,MAAM,WAAW,MAAM,GAAG,UAAU,CAAC,QAAQ,OAAO;YAEpD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBACE,SAAS;gBACT,MAAM;oBACJ,eAAe,SAAS,aAAa;oBACrC,cAAc,SAAS,YAAY;oBACnC,aAAa,SAAS,WAAW;oBACjC,UAAU,SAAS,QAAQ;gBAC7B;YACF,GACA;gBAAE,QAAQ;YAAI;QAElB;IACF,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,gCAAgC;QAC9C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;YAAyB,OAAO,MAAM,OAAO;QAAC,GACzD;YAAE,QAAQ;QAAI;IAElB;AACF"}},
    {"offset": {"line": 271, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}