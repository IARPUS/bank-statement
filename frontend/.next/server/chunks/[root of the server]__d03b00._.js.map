{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///Users/roychoi/Desktop/projects/bank-analysis/frontend/app/api/files/analyze/tesseract/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\n\n// Disable Next.js built-in body parser\nexport const config = {\n  api: {\n    bodyParser: false,\n  },\n};\n\n/**\n * POST /api/parse-pdf\n * \n * Expects JSON body:\n * {\n *   \"bucketName\": \"your-s3-bucket-name\",\n *   \"filePath\": \"path/to/your/file.pdf\"\n * }\n */\nexport async function POST(req: Request) {\n  try {\n    const backendUrl = \"http://localhost:8080/parse-file-tesseract\"; // Replace with your backend endpoint\n    const body = await req.json();\n\n    if (!body.bucketName || !body.filePath) {\n      return NextResponse.json(\n        { message: \"Missing bucketName or filePath in request body.\" },\n        { status: 400 }\n      );\n    }\n\n    // Forward the request to the backend service\n    const response = await fetch(backendUrl, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(body),\n    });\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      return NextResponse.json(\n        { message: \"Failed to parse PDF.\", error: errorText },\n        { status: response.status }\n      );\n    }\n\n    const data = await response.json();\n    return NextResponse.json(\n      { message: \"PDF parsed successfully.\", data },\n      { status: 200 }\n    );\n  } catch (error) {\n    console.error(\"Error in proxy route:\", error);\n    return NextResponse.json(\n      { message: \"Unexpected error occurred.\", error: (error as Error).message },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":";;;;AAAA;;AAGO,MAAM,SAAS;IACpB,KAAK;QACH,YAAY;IACd;AACF;AAWO,eAAe,KAAK,GAAY;IACrC,IAAI;QACF,MAAM,aAAa,8CAA8C,qCAAqC;QACtG,MAAM,OAAO,MAAM,IAAI,IAAI;QAE3B,IAAI,CAAC,KAAK,UAAU,IAAI,CAAC,KAAK,QAAQ,EAAE;YACtC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;YAAkD,GAC7D;gBAAE,QAAQ;YAAI;QAElB;QAEA,6CAA6C;QAC7C,MAAM,WAAW,MAAM,MAAM,YAAY;YACvC,QAAQ;YACR,SAAS;gBACP,gBAAgB;YAClB;YACA,MAAM,KAAK,SAAS,CAAC;QACvB;QAEA,IAAI,CAAC,SAAS,EAAE,EAAE;YAChB,MAAM,YAAY,MAAM,SAAS,IAAI;YACrC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;gBAAwB,OAAO;YAAU,GACpD;gBAAE,QAAQ,SAAS,MAAM;YAAC;QAE9B;QAEA,MAAM,OAAO,MAAM,SAAS,IAAI;QAChC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;YAA4B;QAAK,GAC5C;YAAE,QAAQ;QAAI;IAElB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,yBAAyB;QACvC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;YAA8B,OAAO,AAAC,MAAgB,OAAO;QAAC,GACzE;YAAE,QAAQ;QAAI;IAElB;AACF"}},
    {"offset": {"line": 111, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}