{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 47, "column": 0}, "map": {"version":3,"sources":["file:///Users/roychoi/Desktop/projects/bank-analysis/frontend/app/api/files/retrieve-metadata/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\n\n// If you're using Next.js App Router, name your file `route.ts` in `app/api/proxy-s3/`\n\n// Disable Next.js built-in body parser for demonstration (like your Textract example)\nexport const config = {\n  api: {\n    bodyParser: false,\n  },\n};\n\n/**\n * POST /api/proxy-s3\n * \n * Expects JSON body:\n * {\n *   \"bucketName\": \"...\",\n *   \"filePath\": \"...\",\n *   \"mode\": \"object\" | \"metadata\"\n * }\n * \n * Example usage (client-side):\n * \n *   await fetch(\"/api/proxy-s3\", {\n *     method: \"POST\",\n *     headers: { \"Content-Type\": \"application/json\" },\n *     body: JSON.stringify({\n *       bucketName: \"my-bucket\",\n *       filePath: \"some/key.pdf\",\n *       mode: \"metadata\"\n *     })\n *   });\n */\nexport async function POST(req: Request) {\n  try {\n    const backendUrl = \"http://localhost:8080/list-directory-s3\";\n    const body = await req.json();\n\n    const response = await fetch(backendUrl, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(body), // Forward JSON directly\n    });\n\n    if (!response.ok) {\n      const error = await response.text();\n      return new Response(JSON.stringify({ message: \"Error uploading file\", error }), {\n        status: response.status,\n        headers: { \"Content-Type\": \"application/json\" },\n      });\n    }\n\n    const data = await response.json();\n    return new Response(JSON.stringify({ message: \"File uploaded successfully\", data }), {\n      status: 200,\n      headers: { \"Content-Type\": \"application/json\" },\n    });\n  } catch (error) {\n    console.error(\"Error in API route:\", error);\n    return new Response(JSON.stringify({ message: \"Error uploading file\", error: error.message }), {\n      status: 500,\n      headers: { \"Content-Type\": \"application/json\" },\n    });\n  }\n}"],"names":[],"mappings":";;;;AAKO,MAAM,SAAS;IACpB,KAAK;QACH,YAAY;IACd;AACF;AAwBO,eAAe,KAAK,GAAY;IACrC,IAAI;QACF,MAAM,aAAa;QACnB,MAAM,OAAO,MAAM,IAAI,IAAI;QAE3B,MAAM,WAAW,MAAM,MAAM,YAAY;YACvC,QAAQ;YACR,SAAS;gBACP,gBAAgB;YAClB;YACA,MAAM,KAAK,SAAS,CAAC;QACvB;QAEA,IAAI,CAAC,SAAS,EAAE,EAAE;YAChB,MAAM,QAAQ,MAAM,SAAS,IAAI;YACjC,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC;gBAAE,SAAS;gBAAwB;YAAM,IAAI;gBAC9E,QAAQ,SAAS,MAAM;gBACvB,SAAS;oBAAE,gBAAgB;gBAAmB;YAChD;QACF;QAEA,MAAM,OAAO,MAAM,SAAS,IAAI;QAChC,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC;YAAE,SAAS;YAA8B;QAAK,IAAI;YACnF,QAAQ;YACR,SAAS;gBAAE,gBAAgB;YAAmB;QAChD;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,uBAAuB;QACrC,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC;YAAE,SAAS;YAAwB,OAAO,MAAM,OAAO;QAAC,IAAI;YAC7F,QAAQ;YACR,SAAS;gBAAE,gBAAgB;YAAmB;QAChD;IACF;AACF"}},
    {"offset": {"line": 102, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}