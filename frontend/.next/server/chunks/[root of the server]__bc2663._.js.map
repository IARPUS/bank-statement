{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 47, "column": 0}, "map": {"version":3,"sources":["file:///Users/roychoi/Desktop/projects/bank-analysis/frontend/app/api/files/upload/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\n\nexport const config = {\n  api: {\n    bodyParser: false, // Disable body parsing to handle FormData\n  },\n};\n\nexport async function POST(req) {\n  try {\n    const backendUrl = \"http://localhost:8080/upload-file-s3\"; // Go backend URL\n\n    // Extract the body as FormData\n    const formData = await req.formData();\n\n    // Create a new FormData instance to send to the backend\n    const body = new FormData();\n    for (const [key, value] of formData.entries()) {\n      body.append(key, value);\n    }\n\n    // Forward the request to the Go backend\n    const response = await fetch(backendUrl, {\n      method: \"POST\",\n      body: body, // Forward the FormData\n      headers: {\n        // Don't include unnecessary headers\n      },\n    });\n\n    if (!response.ok) {\n      const error = await response.text();\n      return new Response(JSON.stringify({ message: \"Error uploading file\", error }), {\n        status: response.status,\n        headers: { \"Content-Type\": \"application/json\" },\n      });\n    }\n\n    const data = await response.json();\n    return new Response(JSON.stringify({ message: \"File uploaded successfully\", data }), {\n      status: 200,\n      headers: { \"Content-Type\": \"application/json\" },\n    });\n  } catch (error) {\n    console.error(\"Error in API route:\", error);\n    return new Response(JSON.stringify({ message: \"Error uploading file\", error: error.message }), {\n      status: 500,\n      headers: { \"Content-Type\": \"application/json\" },\n    });\n  }\n}\n"],"names":[],"mappings":";;;;AAEO,MAAM,SAAS;IACpB,KAAK;QACH,YAAY;IACd;AACF;AAEO,eAAe,KAAK,GAAG;IAC5B,IAAI;QACF,MAAM,aAAa,wCAAwC,iBAAiB;QAE5E,+BAA+B;QAC/B,MAAM,WAAW,MAAM,IAAI,QAAQ;QAEnC,wDAAwD;QACxD,MAAM,OAAO,IAAI;QACjB,KAAK,MAAM,CAAC,KAAK,MAAM,IAAI,SAAS,OAAO,GAAI;YAC7C,KAAK,MAAM,CAAC,KAAK;QACnB;QAEA,wCAAwC;QACxC,MAAM,WAAW,MAAM,MAAM,YAAY;YACvC,QAAQ;YACR,MAAM;YACN,SAAS;YAET;QACF;QAEA,IAAI,CAAC,SAAS,EAAE,EAAE;YAChB,MAAM,QAAQ,MAAM,SAAS,IAAI;YACjC,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC;gBAAE,SAAS;gBAAwB;YAAM,IAAI;gBAC9E,QAAQ,SAAS,MAAM;gBACvB,SAAS;oBAAE,gBAAgB;gBAAmB;YAChD;QACF;QAEA,MAAM,OAAO,MAAM,SAAS,IAAI;QAChC,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC;YAAE,SAAS;YAA8B;QAAK,IAAI;YACnF,QAAQ;YACR,SAAS;gBAAE,gBAAgB;YAAmB;QAChD;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,uBAAuB;QACrC,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC;YAAE,SAAS;YAAwB,OAAO,MAAM,OAAO;QAAC,IAAI;YAC7F,QAAQ;YACR,SAAS;gBAAE,gBAAgB;YAAmB;QAChD;IACF;AACF"}},
    {"offset": {"line": 108, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}