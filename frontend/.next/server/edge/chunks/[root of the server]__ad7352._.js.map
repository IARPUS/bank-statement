{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/app/api/upload/route.tsx"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\n\n// Optional: Configuration for Edge Runtime\nexport const runtime = 'edge'; // Use edge runtime for faster response handling\n\nexport const config = {\n  api: {\n    bodyParser: false, // Disable body parsing to handle FormData\n  },\n};\n\nexport async function POST(req: NextRequest) {\n  const backendUrl = 'http://localhost:8080/upload'; // Go backend URL\n\n  try {\n    // Get the raw body from the request\n    const rawBody = req.body;\n\n    if (!rawBody) {\n      return NextResponse.json({ message: 'Request body is missing' }, { status: 400 });\n    }\n\n    // Transform headers for fetch\n    const headers: Record<string, string> = {};\n    req.headers.forEach((value, key) => {\n      headers[key] = value;\n    });\n\n    // Forward the request to the Go backend\n    const response = await fetch(backendUrl, {\n      method: 'POST',\n      headers: {\n        ...headers,\n      },\n      body: rawBody, // Forward the raw body\n    });\n\n    // Check backend response\n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error('Backend error:', response.status, errorText);\n      return NextResponse.json(\n        { error: `Backend error: ${errorText}` },\n        { status: response.status }\n      );\n    }\n\n    // Forward successful response\n    const responseData = await response.json();\n    return NextResponse.json(responseData, { status: response.status });\n  } catch (error) {\n    console.error('Error in API route:', error);\n    return NextResponse.json(\n      { message: 'Internal server error', error },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":";;;;;AAAA;AAAA;;AAGO,MAAM,UAAU,QAAQ,gDAAgD;AAExE,MAAM,SAAS;IACpB,KAAK;QACH,YAAY;IACd;AACF;AAEO,eAAe,KAAK,GAAgB;IACzC,MAAM,aAAa,gCAAgC,iBAAiB;IAEpE,IAAI;QACF,oCAAoC;QACpC,MAAM,UAAU,IAAI,IAAI;QAExB,IAAI,CAAC,SAAS;YACZ,OAAO,+LAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;YAA0B,GAAG;gBAAE,QAAQ;YAAI;QACjF;QAEA,8BAA8B;QAC9B,MAAM,UAAkC,CAAC;QACzC,IAAI,OAAO,CAAC,OAAO,CAAC,CAAC,OAAO;YAC1B,OAAO,CAAC,IAAI,GAAG;QACjB;QAEA,wCAAwC;QACxC,MAAM,WAAW,MAAM,MAAM,YAAY;YACvC,QAAQ;YACR,SAAS;gBACP,GAAG,OAAO;YACZ;YACA,MAAM;QACR;QAEA,yBAAyB;QACzB,IAAI,CAAC,SAAS,EAAE,EAAE;YAChB,MAAM,YAAY,MAAM,SAAS,IAAI;YACrC,QAAQ,KAAK,CAAC,kBAAkB,SAAS,MAAM,EAAE;YACjD,OAAO,+LAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO,CAAC,eAAe,EAAE,WAAW;YAAC,GACvC;gBAAE,QAAQ,SAAS,MAAM;YAAC;QAE9B;QAEA,8BAA8B;QAC9B,MAAM,eAAe,MAAM,SAAS,IAAI;QACxC,OAAO,+LAAA,CAAA,eAAY,CAAC,IAAI,CAAC,cAAc;YAAE,QAAQ,SAAS,MAAM;QAAC;IACnE,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,uBAAuB;QACrC,OAAO,+LAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;YAAyB;QAAM,GAC1C;YAAE,QAAQ;QAAI;IAElB;AACF"}},
    {"offset": {"line": 87, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 92, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 92, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}